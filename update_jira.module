<?php

/**
 * @file
 * Push update status to Jira as tickets.
 */

/**
 * Implements hook_menu().
 */
function update_jira_menu() {
  $items = array();

  $items['admin/config/system/update-jira'] = array(
    'title' => 'Update Jira',
    'description' => 'Push update status to Jira as tickets.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('update_jira_admin_settings_form'),
    'access arguments' => array('administer update jira'),
    'file' => 'update_jira.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_update_status_alter().
 */
function update_jira_update_status_alter(&$projects) {
  dpm($projects);
  foreach ($projects as $project) {
    if ($project['status'] > 0
      && $project['status'] != UPDATE_CURRENT
      && variable_get('update_jira_create_ticket:' . $project['status'])
      && !in_array($project['name'], array_map('trim', explode("\n", variable_get('update_jira_ignored_projects', array()))))) {
      update_jira_update_needed($project);
    }
  }
}

/**
 * Implements hook_token_info().
 */
function update_jira_token_info() {
  $info = array();

  // Project info.
  $info['types']['project'] = array(
    'name' => t('Project information'),
    'description' => t('A token type for information regarding projects for Jira Update.'),
  );

  $info['tokens']['project']['title'] = array(
    'name' => t('Title of the project'),
    'description' => t('Title of the update.'),
  );

  $info['tokens']['project']['existing_version'] = array(
    'name' => t('Current version of the project'),
    'description' => t('Current version of the project.'),
  );

  $info['tokens']['project']['link'] = array(
    'name' => t('Link to the projects drupal.org page'),
    'description' => t('Link to the projects drupal.org page.'),
  );

  // Release info.
  $info['types']['release'] = array(
    'name' => t('Recommended release'),
    'description' => t('A token type for information regarding recommended releases for Jira Update.'),
  );

  $info['tokens']['release']['name'] = array(
    'name' => t('Name of the update'),
    'description' => t('Name of the update (project name and recommended version).'),
  );
  $info['tokens']['release']['version'] = array(
    'name' => t('Recommended version'),
    'description' => t('The recommended version to update to.'),
  );
  $info['tokens']['release']['release_link'] = array(
    'name' => t('Link to release notes'),
    'description' => t('A link to the release notes of the recommended version.'),
  );
  $info['tokens']['release']['release_types'] = array(
    'name' => t('Release type tags.'),
    'description' => t('A comma separated list of release type tags.'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function update_jira_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'project') {
    // Loop through the available tokens.
    foreach ($tokens as $name => $original) {
      // Find our custom tokens by name.
      switch ($name) {
        case 'title':

        default:
          $value = $data['project']->$name;
          break;
      }

      $replacements[$original] = $value;
    }
  }
  elseif ($type == 'release') {
    // Loop through the available tokens.
    foreach ($tokens as $name => $original) {
      // Find our custom tokens by name.
      switch ($name) {
        case 'release_types':
          $value = implode(', ', $data['release']->terms['Release type']);
          break;

        default:
          $value = $data['release']->$name;
          break;
      }

      $replacements[$original] = $value;
    }
  }

  return $replacements;
}

/**
 * Do stuff.
 */
function update_jira_update_needed($project) {
  $username = variable_get('jira_rest_username');
  $password = variable_get('jira_rest_password');
  $project_key = variable_get('update_jira_project_key');
  global $user;
  $token_data = array(
    'release' => (object) $project['releases'][$project['recommended']],
    'project' => (object) $project,
  );
  dpm($token_data);
  $issuedata = array(
    'fields' => array(
      'project' => array('key' => $project_key),
      'summary' => token_replace(variable_get('update_jira_issue_summary:' . $project['status']), $token_data),
      'description' => token_replace(variable_get('update_jira_issue_description:' . $project['status']), $token_data),
      // 'customfield_xxx' => $dataforcustomfield,
    ),
  );
  $issuetype = variable_get('update_jira_issuetype:' . $project['status']);
  if (!empty($issuetype)) {
    $issuedata['fields']['issuetype']['name'] = token_replace($issuetype, $token_data);
  }
  $priority = variable_get('update_jira_priority:' . $project['status']);
  if (!empty($priority)) {
    $issuedata['fields']['priority']['name'] = token_replace($priority, $token_data);
  }

  $existing_update = db_select('update_jira', 'uj')
    ->fields('uj', array('version', 'jira_key'))
    ->condition('project', $project['name'])
    ->execute()
    ->fetchObject();

  if (empty($existing_update)) {
    $result = jira_rest_createissue($username, $password, $issuedata);
  }
  else {
    dpm($existing_update, '$existing_update');
  }

  // $record = array(
  //   'project' => $project['name'],
  //   'version' => $project['recommended'],
  //   'jira_key' => $result->key,
  // );
  // $res = drupal_write_record('update_jira', $record);

  // dpm($res, '$res');
  // dpm($record, '$record');
  // dpm($result, '$result');
  // dpm($issuedata, $project['title']);
}


/**
 *
 */
function update_jira_default_states() {
  return array(
    'UPDATE_NOT_SECURE' => array(
      'create_ticket' => TRUE,
      'description' => 'security updates',
      'issuetype' => 'Bug',
      'priority' => '',
      'issue_summary' => 'Security update: [project:title]',
      'issue_description' => "A security update for [project:title] ([project:link]) is available.\n\nThe recommended version is [release:version]. Current version is [project:existing_version].\n\nDetails for version [release:version] can be found in the release notes at [release:release_link].\n\nThe release has been tagged: [release:release_type].",
    ),
    'UPDATE_REVOKED' => array(
      'create_ticket' => TRUE,
      'description' => 'revoked versions',
      'issuetype' => 'Bug',
      'priority' => '',
      'issue_summary' => 'Revoked version: [project:title]',
      'issue_description' => "You are using a revoked version of [project:title] ([project:link]).\n\nThe recommended version is [release:version]. Current version is [project:existing_version].\n\nDetails for version [release:version] can be found in the release notes at [release:release_link].\n\nThe release has been tagged: [release:release_type].",
    ),
    'UPDATE_NOT_SUPPORTED' => array(
      'create_ticket' => TRUE,
      'description' => 'unsupported releases',
      'issuetype' => 'Bug',
      'priority' => '',
      'issue_summary' => 'Unsupported version: [project:title]',
      'issue_description' => "The currently used version of [project:title] ([project:link]) is no longer supported.\n\nThe recommended version is [release:version]. Current version is [project:existing_version].\n\nDetails for version [release:version] can be found in the release notes at [release:release_link].\n\nThe release has been tagged: [release:release_type].",
    ),
    'UPDATE_NOT_CURRENT' => array(
      'create_ticket' => TRUE,
      'description' => 'regular updates',
      'issuetype' => 'Improvement',
      'priority' => '',
      'issue_summary' => 'Update available: [project:title]',
      'issue_description' => "A new version of [project:title] ([project:link]) is available.\n\nThe recommended version is [release:version]. Current version is [project:existing_version].\n\nDetails for version [release:version] can be found in the release notes at [release:release_link].\n\nThe release has been tagged: [release:release_type].",
    ),
  );
}
